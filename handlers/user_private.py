import json
import os

from aiogram import types, Router, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, or_f
from aiogram.utils.formatting import as_list, as_marked_section, Bold
from database.schedule_conversion import all_day

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from filters.chat_types import ChatTypeFilter
from keyboards import reply
from database.requests import del_task, set_task

from openpyxl import load_workbook
from database.schedule_conversion import get_file

from aiogram.types import Message, FSInputFile

from datetime import date, timedelta,datetime,timezone
import pytz

user_private_router = Router()
user_private_router.message.filter(ChatTypeFilter(['private']))

liters = ['Œú', 'Œû', 'Œü', 'Œ†', 'Œ°', 'Œ£', 'Œ§', 'Œ¶', 'Œß', 'Œ®', 'Œí', 'Œñ', 'Œì', 'Œô', 'Œî', 'Œó', 'Œò', 'Œï', '–ö', 'Œõ']
groups = ['B', 'A']
classes = ['10', '11']


async def download():
    kras_timezone = pytz.timezone('Asia/Krasnoyarsk')
    current_hour_kras = datetime.now(kras_timezone).hour
    with open(f'date.txt', 'r', encoding="utf-8") as f:
        datt = f.read()
        datt = datetime.strptime(datt, '%Y-%m-%d').date()
    dt_to = date.today()

    if datt > dt_to:
        return 0
    elif datt == dt_to:
        if current_hour_kras >= 16:
            dt_to = date.today() + timedelta(days=1)
            get_file(dt_to)
            get_time_tab()
            return 1
        else:
            return 0
    elif datt < dt_to:
        if current_hour_kras >= 16:
            dt_to = date.today() + timedelta(days=1)
            get_file(dt_to)
            get_time_tab()
            return 1
        else:
            get_file(dt_to)
            get_time_tab()
            return 1

from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder, InlineKeyboardButton

def get_time_tab():
    workbook = load_workbook('Sample.xlsx')
    for el in workbook.sheetnames:
        if '11' in el:
            all_day('11')
        if '10' in el:
            all_day('10')

def class_variants():
    with open(f'data_10.json', 'r', encoding="utf-8") as f:
        file = json.load(f)
        button_list = file['classes']['10']
    with open(f'data_11.json', 'r', encoding="utf-8") as f:
        file = json.load(f)
        button_list = button_list + file['classes']['11']
    return button_list


@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –§–ú–® –±–æ—Ç, —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ üòâ\nC –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –±—É–¥—É—Ç –ø–æ–¥ —Ä—É–∫–æ–π –∏ —Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ',
        reply_markup=reply.start_kb.as_markup(
            resize_keyboard=True,
            input_field_placeholder='–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?'))


@user_private_router.message(F.text.lower() == '–º–µ–Ω—é üìÇ')
async def menu_cmd(message: types.Message):
    await message.answer('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
                         reply_markup=reply.menu_kb.as_markup(resize_keyboard=True))


@user_private_router.message(F.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ üè†')
async def start_cmd(message: types.Message):
    await message.answer('–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –Ω–∞—á–∞–ª–æ', reply_markup=reply.start_kb.as_markup(resize_keyboard=True))


@user_private_router.message(F.text.lower() == '–∑–∞–º–µ—Ç–∫–∏ üìù')
async def notes_cmd(message: types.Message):
    await message.answer('–ù–∞–∂–º–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–æ–≤—É—é',
                         reply_markup=await reply.tasks(message.from_user.id))


# @user_private_router.callback_query(F.data.startswith('task_'))
# async def delete_task(callback: types.CallbackQuery):
#     await callback.answer('–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞')
#     await del_task(callback.data.split('_')[1])
#     await callback.message.delete()
#     await callback.message.answer('–ù–∞–∂–º–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–æ–≤—É—é',
#                                   reply_markup=await reply.tasks(callback.from_user.id))
#     await callback.answer('–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!')

# @user_private_router.message(or_f(F.text.lower() != '–∫–æ–Ω—Ç–∞–∫—Ç—ã üìû'), (F.text.lower() != '/restart'), (F.text.lower() != '–ø–æ–º–æ—â—å ‚ùì'), (F.text.lower() != '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÜ'), (F.text.lower() != '‚¨ÖÔ∏è –Ω–∞–∑–∞–¥'))
# async def add_task(message: types.Message):
#     if len(message.text) > 200:
#         await message.answer('–ó–∞–¥–∞—á–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è')
#         return
#     await set_task(message.from_user.id, message.text)
#     await message.answer('–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞\n–ù–∞–∂–º–∏ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –Ω–æ–≤—É—é',
#                          reply_markup=await reply.tasks(message.from_user.id))


# @user_private_router.message(F.text.lower() == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÜ')
# async def schedule_cmd(message: types.Message):
#     await set_task(message.from_user.id, message.text)
#     await message.answer('–í—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å',
#                          reply_markup=await reply.tasks(message.from_user.id))

@user_private_router.message(F.text.lower() == '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üìÜ')
async def class_cmd(message: types.Message):
    await download() 
    await message.answer('–≤—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å', reply_markup=reply.clases_kb.as_markup(resize_keyboard=True))


@user_private_router.message(F.text == '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –ª–∏—Ç–µ—Ä—É üî†')
async def back_cmd(message: types.Message, state: FSMContext):    
    if await download():
        await state.clear()
    data = await state.get_data()
    if len(data.keys()) == 2 or len(data.keys()) == 3:
        if data['user_class']:
            await send_button(message, state)
        else:
            await state.clear()
            await message.answer('–≤—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å', reply_markup=reply.clases_kb.as_markup(resize_keyboard=True))
    else:
        await state.clear()
        await message.answer('–≤—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å', reply_markup=reply.clases_kb.as_markup(resize_keyboard=True))


@user_private_router.message(F.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üìÇüîô')
async def back_cmd(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
                         reply_markup=reply.menu_kb.as_markup(resize_keyboard=True))

@user_private_router.message(F.text == '‚öôÔ∏è')
async def back_cmd(message: types.Message, state: FSMContext):
    if message.from_user.id == 5480167477 or message.from_user.id == 1550008797:
        await message.answer('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
                             reply_markup=reply.admin_kb.as_markup(resize_keyboard=True))
    else:
        await message.answer('–î–æ—Å—Ç—É–ø –∑–∞–∫—Ä—ã—Ç.')


@user_private_router.message(F.text.lower().in_([classs.lower() for classs in classes]))
async def send_button(message: types.Message, state: FSMContext):
    clas = message.text
    if await download():
        await state.set_state()
    if clas == '10' or clas == '11':
        await state.update_data(user_class=clas)
    else:
        data = await state.get_data()
        clas = data['user_class']
    with open(f'data_{clas}.json', 'r', encoding="utf-8") as f:
        file = json.load(f)
        button_list = file['classes'][clas]
    liter = ReplyKeyboardBuilder()
    for button_text in button_list:
        liter.button(text=button_text)
    liter.button(text='üîÄ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–ª–∞—Å—Å üè´'),
    liter.button(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é üìÇüîô'),
    liter.button(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ üè†')
    liter.adjust(5)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—Ç–µ—Ä—É:", reply_markup=liter.as_markup(resize_keyboard=True))


@user_private_router.message(F.text == 'üîÄ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –∫–ª–∞—Å—Å üè´')
async def back_cmd(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer('–≤—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å', reply_markup=reply.clases_kb.as_markup(resize_keyboard=True))


@user_private_router.message(lambda message: message.text.lower() in [var.lower() for var in class_variants()])
async def back_cmd(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if await download():
        await state.set_state()
    if len(data.keys()) >= 1:
        await state.update_data(user_litera=message.text)
        await message.answer('–≤—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É', reply_markup=reply.group_kb.as_markup(resize_keyboard=True))
    else:
        await state.clear()
        await message.answer('–≤—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å', reply_markup=reply.clases_kb.as_markup(resize_keyboard=True))


@user_private_router.message(F.text.lower().in_([group.lower() for group in groups]))
async def group_A_cmd(message: types.Message, state: FSMContext):
    await state.update_data(user_group=message.text)
    data = await state.get_data()
    if await  download():
        await state.set_state()
    if len(data.keys()) == 3:
        with open(f'data_{data['user_class']}.json', 'r', encoding="utf-8") as f:
            file = json.load(f)
        print(data['user_litera'])
        await message.answer(
            f'–†–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {file['date']}\n{data['user_litera']} {data['user_group']}{file[data['user_group']][data['user_litera']]}')

    else:
        await state.clear()
        await message.answer('–≤—ã–±–µ—Ä–∏ –∫–ª–∞—Å—Å', reply_markup=reply.clases_kb.as_markup(resize_keyboard=True))


@user_private_router.message(F.text == 'üîÑ')
async def reload_data_cmd(message: types.Message, state: FSMContext):
    if message.from_user.id == 5480167477 or message.from_user.id == 1550008797:
        await message.answer('–°–æ—Ö—Ä–∞–Ω—è—é —Ä–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ.')
        get_file(date.today())
        get_time_tab()
        await message.answer('–†–∞—Å—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.')



#
# @user_private_router.callback_query(F.data == '10')
# async def tenth_classes(message: types.Message):
#     await message.answer(text='10 –∫–ª–∞—Å—Å')
#
# @user_private_router.callback_query(F.data == '11')
# async def tenth_classes(message: types.Message):
#     await message.answer(text= '11 –∫–ª–∞—Å—Å',reply_markup=reply.liter_kb_11())


@user_private_router.message(F.text.lower() == '–ø–æ–º–æ—â—å ‚ùì')
async def help_cmd(message: types.Message):
    text = '<b>–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\nüü¢ –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é".\nüü¢ –î–ª—è —Å–≤—è–∑–∏ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É "–ö–æ–Ω—Ç–∞–∫—Ç—ã".\nüü¢ –û—Ü–µ–Ω–∏—Ç—å –±–æ—Ç–∞ —Ç—ã —Å–º–æ–∂–µ—à—å, –ø—Ä–æ–π–¥—è –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø—Ä–æ—Å –ø–æ —Å—Å—ã–ª–∫–µ: https://forms.gle/DKfZa3WKFjWcVGKVA'
    await message.answer(text)


@user_private_router.message(F.text.lower() == '–∫–æ–Ω—Ç–∞–∫—Ç—ã üìû')
async def contacts_cmd(message: types.Message):
    await message.answer('<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º ‚Äî @k1f1r1k @ag_st_d', parse_mode='HTML')

@user_private_router.message(F.text == 'üìí')
async def cmd_start(message: Message, state: FSMContext):
    if message.from_user.id == 5480167477 or message.from_user.id == 1550008797:
        db_file = FSInputFile('db.sqlite3')
        await message.answer_document(db_file)
